// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type NewTodo struct {
	Text   string     `json:"text"`
	Status TodoStatus `json:"status"`
}

type Todo struct {
	ID     string     `json:"id"`
	Text   string     `json:"text"`
	Status TodoStatus `json:"status"`
}

type TodoStatus string

const (
	TodoStatusTodo    TodoStatus = "TODO"
	TodoStatusProcess TodoStatus = "PROCESS"
	TodoStatusDone    TodoStatus = "DONE"
)

var AllTodoStatus = []TodoStatus{
	TodoStatusTodo,
	TodoStatusProcess,
	TodoStatusDone,
}

func (e TodoStatus) IsValid() bool {
	switch e {
	case TodoStatusTodo, TodoStatusProcess, TodoStatusDone:
		return true
	}
	return false
}

func (e TodoStatus) String() string {
	return string(e)
}

func (e *TodoStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TodoStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TodoStatus", str)
	}
	return nil
}

func (e TodoStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
